import { RoadmapTopic } from '@/types';

// Helper function to create problem ID from title
const createId = (title: string): string => {
  return title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
};

// Helper function to get LeetCode ID and URL from problem title
const getLeetCodeInfo = (title: string): { leetcodeId?: number; leetcodeUrl?: string } => {
  const leetcodeProblems: Record<string, { id: number; url: string }> = {
    'two sum': { id: 1, url: 'https://leetcode.com/problems/two-sum' },
    'two sum ii - input array is sorted': { id: 167, url: 'https://leetcode.com/problems/two-sum-ii-input-array-is-sorted' },
    'remove duplicates from sorted array': { id: 26, url: 'https://leetcode.com/problems/remove-duplicates-from-sorted-array' },
    'product of array except self': { id: 238, url: 'https://leetcode.com/problems/product-of-array-except-self' },
    'container with most water': { id: 11, url: 'https://leetcode.com/problems/container-with-most-water' },
    'trapping rain water': { id: 42, url: 'https://leetcode.com/problems/trapping-rain-water' },
    'rotate array': { id: 189, url: 'https://leetcode.com/problems/rotate-array' },
    'move zeroes': { id: 283, url: 'https://leetcode.com/problems/move-zeroes' },
    'group anagrams': { id: 49, url: 'https://leetcode.com/problems/group-anagrams' },
    'missing number': { id: 268, url: 'https://leetcode.com/problems/missing-number' },
    'top k frequent elements': { id: 347, url: 'https://leetcode.com/problems/top-k-frequent-elements' },
    'sort colors': { id: 75, url: 'https://leetcode.com/problems/sort-colors' },
    'spiral matrix': { id: 54, url: 'https://leetcode.com/problems/spiral-matrix' },
    'majority element': { id: 169, url: 'https://leetcode.com/problems/majority-element' },
    'majority element ii': { id: 229, url: 'https://leetcode.com/problems/majority-element-ii' },
    'longest consecutive sequence': { id: 128, url: 'https://leetcode.com/problems/longest-consecutive-sequence' },
    'longest common prefix': { id: 14, url: 'https://leetcode.com/problems/longest-common-prefix' },
    'longest substring without repeating characters': { id: 3, url: 'https://leetcode.com/problems/longest-substring-without-repeating-characters' },
    'maximum subarray': { id: 53, url: 'https://leetcode.com/problems/maximum-subarray' },
    'reverse words in a string': { id: 151, url: 'https://leetcode.com/problems/reverse-words-in-a-string' },
    'string compression': { id: 443, url: 'https://leetcode.com/problems/string-compression' },
    'is subsequence': { id: 392, url: 'https://leetcode.com/problems/is-subsequence' },
    'max number of k-sum pairs': { id: 1679, url: 'https://leetcode.com/problems/max-number-of-k-sum-pairs' },
    '3sum': { id: 15, url: 'https://leetcode.com/problems/3sum' },
    'permutation in string': { id: 567, url: 'https://leetcode.com/problems/permutation-in-string' },
    'min stack': { id: 155, url: 'https://leetcode.com/problems/min-stack' },
    'sliding window maximum': { id: 239, url: 'https://leetcode.com/problems/sliding-window-maximum' },
    'minimum window substring': { id: 76, url: 'https://leetcode.com/problems/minimum-window-substring' },
    'daily temperatures': { id: 739, url: 'https://leetcode.com/problems/daily-temperatures' },
    'car fleet': { id: 853, url: 'https://leetcode.com/problems/car-fleet' },
    'largest rectangle in histogram': { id: 84, url: 'https://leetcode.com/problems/largest-rectangle-in-histogram' },
    'expression add operators': { id: 282, url: 'https://leetcode.com/problems/expression-add-operators' },
    'reverse linked list': { id: 206, url: 'https://leetcode.com/problems/reverse-linked-list' },
    'merge two sorted lists': { id: 21, url: 'https://leetcode.com/problems/merge-two-sorted-lists' },
    'reorder list': { id: 143, url: 'https://leetcode.com/problems/reorder-list' },
    'linked list cycle': { id: 141, url: 'https://leetcode.com/problems/linked-list-cycle' },
    'linked list cycle ii': { id: 142, url: 'https://leetcode.com/problems/linked-list-cycle-ii' },
    'find the duplicate number': { id: 287, url: 'https://leetcode.com/problems/find-the-duplicate-number' },
    'lru cache': { id: 146, url: 'https://leetcode.com/problems/lru-cache' },
    'remove duplicates from sorted list': { id: 83, url: 'https://leetcode.com/problems/remove-duplicates-from-sorted-list' },
    'intersection of two linked lists': { id: 160, url: 'https://leetcode.com/problems/intersection-of-two-linked-lists' },
    '460. lfu cache': { id: 460, url: 'https://leetcode.com/problems/lfu-cache' },
    'design browser history': { id: 1472, url: 'https://leetcode.com/problems/design-browser-history' },
    'subsets': { id: 78, url: 'https://leetcode.com/problems/subsets' },
    'subsets ii': { id: 90, url: 'https://leetcode.com/problems/subsets-ii' },
    'combination sum': { id: 39, url: 'https://leetcode.com/problems/combination-sum' },
    'n-queens': { id: 51, url: 'https://leetcode.com/problems/n-queens' },
    'n-queens ii': { id: 52, url: 'https://leetcode.com/problems/n-queens-ii' },
    'sudoku solver': { id: 37, url: 'https://leetcode.com/problems/sudoku-solver' },
    'climbing stairs': { id: 70, url: 'https://leetcode.com/problems/climbing-stairs' },
    'unique paths': { id: 62, url: 'https://leetcode.com/problems/unique-paths' },
    'generate parentheses': { id: 22, url: 'https://leetcode.com/problems/generate-parentheses' },
    'binary tree level order traversal': { id: 102, url: 'https://leetcode.com/problems/binary-tree-level-order-traversal' },
    'binary tree preorder traversal': { id: 144, url: 'https://leetcode.com/problems/binary-tree-preorder-traversal' },
    'delete node in a bst': { id: 450, url: 'https://leetcode.com/problems/delete-node-in-a-bst' },
    'invert binary tree': { id: 226, url: 'https://leetcode.com/problems/invert-binary-tree' },
    'maximum depth of binary tree': { id: 104, url: 'https://leetcode.com/problems/maximum-depth-of-binary-tree' },
    'diameter of binary tree': { id: 543, url: 'https://leetcode.com/problems/diameter-of-binary-tree' },
    'same tree': { id: 100, url: 'https://leetcode.com/problems/same-tree' },
    'subtree of another tree': { id: 572, url: 'https://leetcode.com/problems/subtree-of-another-tree' },
    'lowest common ancestor of a binary search tree': { id: 235, url: 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree' },
    'lowest common ancestor of a binary tree': { id: 236, url: 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree' },
    'binary tree zigzag level order traversal': { id: 103, url: 'https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal' },
    'vertical order traversal of a binary tree': { id: 987, url: 'https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree' },
    'serialize and deserialize binary tree': { id: 297, url: 'https://leetcode.com/problems/serialize-and-deserialize-binary-tree' },
    'clone graph': { id: 133, url: 'https://leetcode.com/problems/clone-graph' },
    'rotting oranges': { id: 994, url: 'https://leetcode.com/problems/rotting-oranges' },
    'number of islands': { id: 200, url: 'https://leetcode.com/problems/number-of-islands' },
    'flood fill': { id: 733, url: 'https://leetcode.com/problems/flood-fill' },
    'course schedule': { id: 207, url: 'https://leetcode.com/problems/course-schedule' },
    'course schedule ii': { id: 210, url: 'https://leetcode.com/problems/course-schedule-ii' },
    'longest increasing path in a matrix': { id: 329, url: 'https://leetcode.com/problems/longest-increasing-path-in-a-matrix' },
    '913. cat and mouse': { id: 913, url: 'https://leetcode.com/problems/cat-and-mouse' },
    'network delay time': { id: 743, url: 'https://leetcode.com/problems/network-delay-time' },
    'cheapest flights within k stops': { id: 787, url: 'https://leetcode.com/problems/cheapest-flights-within-k-stops' },
    'course schedule iv': { id: 1462, url: 'https://leetcode.com/problems/course-schedule-iv' },
    'shortest path in binary matrix': { id: 1091, url: 'https://leetcode.com/problems/shortest-path-in-binary-matrix' },
    'implement trie (prefix tree)': { id: 208, url: 'https://leetcode.com/problems/implement-trie-prefix-tree' },
    'word search': { id: 79, url: 'https://leetcode.com/problems/word-search' },
    'word search ii': { id: 212, url: 'https://leetcode.com/problems/word-search-ii' },
    'unique paths ii': { id: 63, url: 'https://leetcode.com/problems/unique-paths-ii' },
    'house robber': { id: 198, url: 'https://leetcode.com/problems/house-robber' },
    'house robber ii': { id: 213, url: 'https://leetcode.com/problems/house-robber-ii' },
    'minimum path sum': { id: 64, url: 'https://leetcode.com/problems/minimum-path-sum' },
    'coin change': { id: 322, url: 'https://leetcode.com/problems/coin-change' },
    'best time to buy and sell stock': { id: 121, url: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock' },
    'best time to buy and sell stock ii': { id: 122, url: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii' },
    'best time to buy and sell stock iii': { id: 123, url: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii' },
    'best time to buy and sell stock iv': { id: 188, url: 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv' },
    'decode ways': { id: 91, url: 'https://leetcode.com/problems/decode-ways' },
    'jump game': { id: 55, url: 'https://leetcode.com/problems/jump-game' },
    'longest common subsequence': { id: 1143, url: 'https://leetcode.com/problems/longest-common-subsequence' },
    'longest palindromic subsequence': { id: 516, url: 'https://leetcode.com/problems/longest-palindromic-subsequence' },
    'longest palindromic substring': { id: 5, url: 'https://leetcode.com/problems/longest-palindromic-substring' },
    'lemonade change': { id: 860, url: 'https://leetcode.com/problems/lemonade-change' },
    'binary search': { id: 704, url: 'https://leetcode.com/problems/binary-search' },
    'search in rotated sorted array': { id: 33, url: 'https://leetcode.com/problems/search-in-rotated-sorted-array' },
    'koko eating bananas': { id: 875, url: 'https://leetcode.com/problems/koko-eating-bananas' },
    'sqrt(x)': { id: 69, url: 'https://leetcode.com/problems/sqrtx' },
    'capacity to ship packages within d days': { id: 1011, url: 'https://leetcode.com/problems/capacity-to-ship-packages-within-d-days' },
    'search a 2d matrix': { id: 74, url: 'https://leetcode.com/problems/search-a-2d-matrix' },
    'search a 2d matrix ii': { id: 240, url: 'https://leetcode.com/problems/search-a-2d-matrix-ii' },
  };

  const titleLower = title.toLowerCase();
  const info = leetcodeProblems[titleLower];
  return info ? { leetcodeId: info.id, leetcodeUrl: info.url } : {};
};

// Helper to determine difficulty
const getDifficulty = (title: string, leetcodeId?: number): 'easy' | 'medium' | 'hard' => {
  // Easy problems
  const easyProblems = [
    'two sum', 'remove duplicates', 'missing number', 'majority element', 'move zeroes',
    'reverse linked list', 'merge two sorted lists', 'linked list cycle', 'remove duplicates from sorted list',
    'intersection of two linked lists', 'climbing stairs', 'invert binary tree', 'maximum depth',
    'same tree', 'subtree', 'flood fill', 'binary search', 'sqrt', 'lemonade change', 'is subsequence',
    'valid palindrome', 'best time to buy and sell stock'
  ];

  // Hard problems
  const hardProblems = [
    'trapping rain water', 'largest rectangle', 'expression add operators', 'sliding window maximum',
    'minimum window substring', 'n-queens', 'sudoku solver', 'serialize and deserialize',
    'word search ii', 'best time to buy and sell stock iii', 'best time to buy and sell stock iv',
    'cat and mouse', 'longest increasing path', 'kruskals', 'prims'
  ];

  const titleLower = title.toLowerCase();

  if (easyProblems.some(p => titleLower.includes(p))) return 'easy';
  if (hardProblems.some(p => titleLower.includes(p))) return 'hard';
  return 'medium';
};

// DSA Roadmap from your CSV
export const defaultRoadmapTopics: RoadmapTopic[] = [
  {
    id: 'arrays',
    name: 'Arrays & Strings',
    category: 'beginner',
    description: 'Master array manipulation, two pointers, sliding window, and string operations',
    concepts: ['Two pointers', 'Prefix/Suffix', 'Sliding Window', 'Hash Maps', 'Sorting'],
    order: 1,
    problems: [
      { id: createId('Two Sum'), title: 'Two Sum', difficulty: 'easy', ...getLeetCodeInfo('Two Sum'), status: 'not_started', notes: 'Maps - twoSum.java (22 Mar)', attempts: 0, tags: ['array', 'hash-table'] },
      { id: createId('Two Sum II'), title: 'Two Sum II - Input Array Is Sorted', difficulty: 'easy', ...getLeetCodeInfo('Two Sum II - Input Array Is Sorted'), status: 'not_started', notes: '2 pointers (6 Apr)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('Remove Duplicates from Sorted Array'), title: 'Remove Duplicates from Sorted Array', difficulty: 'easy', ...getLeetCodeInfo('Remove Duplicates from Sorted Array'), status: 'not_started', notes: 'Two pointers - removeDuplicates.java (22 Mar)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('Product of Array Except Self'), title: 'Product of Array Except Self', difficulty: 'medium', ...getLeetCodeInfo('Product of Array Except Self'), status: 'not_started', notes: 'Prefix, Suffix - productExceptSelf.java (23 Mar)', attempts: 0, tags: ['array', 'prefix-sum'] },
      { id: createId('Container With Most Water'), title: 'Container With Most Water', difficulty: 'medium', ...getLeetCodeInfo('Container With Most Water'), status: 'not_started', notes: 'Two pointers - maxArea.java (23 Mar)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('Trapping Rain Water'), title: 'Trapping Rain Water', difficulty: 'hard', ...getLeetCodeInfo('Trapping Rain Water'), status: 'not_started', notes: 'Prefix, Suffix - trap.java (23 Mar)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('Rotate Array'), title: 'Rotate Array', difficulty: 'easy', ...getLeetCodeInfo('Rotate Array'), status: 'not_started', notes: '', attempts: 0, tags: ['array'] },
      { id: createId('Move Zeroes'), title: 'Move Zeroes', difficulty: 'easy', ...getLeetCodeInfo('Move Zeroes'), status: 'not_started', notes: 'Two pointers (29 Mar)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('Group Anagrams'), title: 'Group Anagrams', difficulty: 'medium', ...getLeetCodeInfo('Group Anagrams'), status: 'not_started', notes: 'Master Key - groupAnagrams.java (29 Mar)', attempts: 0, tags: ['array', 'hash-table', 'string'] },
      { id: createId('Missing Number'), title: 'Missing Number', difficulty: 'easy', ...getLeetCodeInfo('Missing Number'), status: 'not_started', notes: 'Xor (5 Apr)', attempts: 0, tags: ['array', 'bit-manipulation'] },
      { id: createId('Top K Frequent Elements'), title: 'Top K Frequent Elements', difficulty: 'medium', ...getLeetCodeInfo('Top K Frequent Elements'), status: 'not_started', notes: 'Map and Flipped Map (6 Apr)', attempts: 0, tags: ['array', 'hash-table', 'heap'] },
      { id: createId('Sort Colors'), title: 'Sort Colors', difficulty: 'medium', ...getLeetCodeInfo('Sort Colors'), status: 'not_started', notes: '3 pointers (27 Apr)', attempts: 0, tags: ['array', 'two-pointers', 'sorting'] },
      { id: createId('Spiral Matrix'), title: 'Spiral Matrix', difficulty: 'medium', ...getLeetCodeInfo('Spiral Matrix'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'matrix'] },
      { id: createId('Majority Element'), title: 'Majority Element', difficulty: 'easy', ...getLeetCodeInfo('Majority Element'), status: 'not_started', notes: 'Fight for Throne - majorityElement.java (29 Mar)', attempts: 0, tags: ['array', 'hash-table'] },
      { id: createId('Majority Element II'), title: 'Majority Element II', difficulty: 'medium', ...getLeetCodeInfo('Majority Element II'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'hash-table'] },
      { id: createId('Longest Consecutive Sequence'), title: 'Longest Consecutive Sequence', difficulty: 'medium', ...getLeetCodeInfo('Longest Consecutive Sequence'), status: 'not_started', notes: 'Check for start of sequence (5 Apr)', attempts: 0, tags: ['array', 'hash-table'] },
      { id: createId('Longest Common Prefix'), title: 'Longest Common Prefix', difficulty: 'easy', ...getLeetCodeInfo('Longest Common Prefix'), status: 'not_started', notes: '', attempts: 0, tags: ['string'] },
      { id: createId('Longest Substring Without Repeating Characters'), title: 'Longest Substring Without Repeating Characters', difficulty: 'medium', ...getLeetCodeInfo('Longest Substring Without Repeating Characters'), status: 'not_started', notes: '2 pointer, Map (5 Apr)', attempts: 0, tags: ['string', 'sliding-window', 'hash-table'] },
      { id: createId('Maximum Subarray'), title: 'Maximum Subarray', difficulty: 'medium', ...getLeetCodeInfo('Maximum Subarray'), status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['array', 'dp'] },
      { id: createId('Reverse Words in a String'), title: 'Reverse Words in a String', difficulty: 'medium', ...getLeetCodeInfo('Reverse Words in a String'), status: 'not_started', notes: '', attempts: 0, tags: ['string', 'two-pointers'] },
      { id: createId('String Compression'), title: 'String Compression', difficulty: 'medium', ...getLeetCodeInfo('String Compression'), status: 'not_started', notes: '', attempts: 0, tags: ['string', 'two-pointers'] },
      { id: createId('Is Subsequence'), title: 'Is Subsequence', difficulty: 'easy', ...getLeetCodeInfo('Is Subsequence'), status: 'not_started', notes: '', attempts: 0, tags: ['string', 'two-pointers'] },
      { id: createId('Max Number of K-Sum Pairs'), title: 'Max Number of K-Sum Pairs', difficulty: 'medium', ...getLeetCodeInfo('Max Number of K-Sum Pairs'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'hash-table', 'two-pointers'] },
      { id: createId('3Sum'), title: '3Sum', difficulty: 'medium', ...getLeetCodeInfo('3Sum'), status: 'not_started', notes: 'Sorting, and 2 pointers - threeSum.java (6 Apr)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('Permutation in String'), title: 'Permutation in String', difficulty: 'medium', ...getLeetCodeInfo('Permutation in String'), status: 'not_started', notes: '', attempts: 0, tags: ['string', 'sliding-window'] },
      { id: createId('Min Stack'), title: 'Min Stack', difficulty: 'medium', ...getLeetCodeInfo('Min Stack'), status: 'not_started', notes: '', attempts: 0, tags: ['stack', 'design'] },
      { id: createId('Sliding Window Maximum'), title: 'Sliding Window Maximum', difficulty: 'hard', ...getLeetCodeInfo('Sliding Window Maximum'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'sliding-window', 'heap'] },
      { id: createId('Minimum Window Substring'), title: 'Minimum Window Substring', difficulty: 'hard', ...getLeetCodeInfo('Minimum Window Substring'), status: 'not_started', notes: '', attempts: 0, tags: ['string', 'sliding-window'] },
      { id: createId('Daily Temperatures'), title: 'Daily Temperatures', difficulty: 'medium', ...getLeetCodeInfo('Daily Temperatures'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'stack'] },
      { id: createId('Car Fleet'), title: 'Car Fleet', difficulty: 'medium', ...getLeetCodeInfo('Car Fleet'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'stack'] },
      { id: createId('Largest Rectangle in Histogram'), title: 'Largest Rectangle in Histogram', difficulty: 'hard', ...getLeetCodeInfo('Largest Rectangle in Histogram'), status: 'not_started', notes: '', attempts: 0, tags: ['array', 'stack'] },
      { id: createId('Expression Add Operators'), title: 'Expression Add Operators', difficulty: 'hard', ...getLeetCodeInfo('Expression Add Operators'), status: 'not_started', notes: '', attempts: 0, tags: ['string', 'backtracking'] },
    ],
  },
  {
    id: 'linked-lists',
    name: 'Linked Lists',
    category: 'beginner',
    description: 'Master linked list manipulation, reversal, and cycle detection',
    concepts: ['Fast-slow pointers', 'Reversal', 'Cycle detection', 'Dummy nodes'],
    order: 2,
    problems: [
      { id: createId('LL Implementation'), title: 'Linked List Implementation', difficulty: 'easy', status: 'not_started', notes: 'LinkedList.java (12 Apr)', attempts: 0, tags: ['linked-list', 'implementation'] },
      { id: createId('Reverse Linked List'), title: 'Reverse Linked List', difficulty: 'easy', ...getLeetCodeInfo('Reverse Linked List'), status: 'not_started', notes: 'reverseList.java (12 Apr)', attempts: 0, tags: ['linked-list', 'recursion'] },
      { id: createId('Merge Two Sorted Lists'), title: 'Merge Two Sorted Lists', difficulty: 'easy', ...getLeetCodeInfo('Merge Two Sorted Lists'), status: 'not_started', notes: 'Dummy pointer - mergeTwoLists.java', attempts: 0, tags: ['linked-list', 'recursion'] },
      { id: createId('Reorder List'), title: 'Reorder List', difficulty: 'medium', ...getLeetCodeInfo('Reorder List'), status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['linked-list', 'two-pointers'] },
      { id: createId('Linked List Cycle'), title: 'Linked List Cycle', difficulty: 'easy', ...getLeetCodeInfo('Linked List Cycle'), status: 'not_started', notes: 'fast and slow - hasCycle.js (13 Apr)', attempts: 0, tags: ['linked-list', 'two-pointers'] },
      { id: createId('Linked List Cycle II'), title: 'Linked List Cycle II', difficulty: 'medium', ...getLeetCodeInfo('Linked List Cycle II'), status: 'not_started', notes: 'fast and slow floyds - detectCycle.java (13 Apr)', attempts: 0, tags: ['linked-list', 'two-pointers'] },
      { id: createId('Find the Duplicate Number'), title: 'Find the Duplicate Number', difficulty: 'medium', ...getLeetCodeInfo('Find the Duplicate Number'), status: 'not_started', notes: 'fast and slow floyds - findDuplicate.java (13 Apr)', attempts: 0, tags: ['array', 'two-pointers'] },
      { id: createId('LRU Cache'), title: 'LRU Cache', difficulty: 'medium', ...getLeetCodeInfo('LRU Cache'), status: 'not_started', notes: 'Doubly LL and Map - DoublyLinkedList.java (19 Apr)', attempts: 0, tags: ['linked-list', 'design', 'hash-table'] },
      { id: createId('Remove Duplicates from Sorted List'), title: 'Remove Duplicates from Sorted List', difficulty: 'easy', ...getLeetCodeInfo('Remove Duplicates from Sorted List'), status: 'not_started', notes: 'deleteDuplicates.java (13 Apr)', attempts: 0, tags: ['linked-list'] },
      { id: createId('Intersection of Two Linked Lists'), title: 'Intersection of Two Linked Lists', difficulty: 'easy', ...getLeetCodeInfo('Intersection of Two Linked Lists'), status: 'not_started', notes: 'count method or fair unfair race - getIntersectionNode.java (13 Apr)', attempts: 0, tags: ['linked-list', 'two-pointers'] },
      { id: createId('LFU Cache'), title: 'LFU Cache', difficulty: 'hard', ...getLeetCodeInfo('460. LFU Cache'), status: 'not_started', notes: 'Two hashmap and Doubly linkedList (20 Apr)', attempts: 0, tags: ['linked-list', 'design', 'hash-table'] },
      { id: createId('Design Browser History'), title: 'Design Browser History', difficulty: 'medium', ...getLeetCodeInfo('Design Browser History'), status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['linked-list', 'design'] },
    ],
  },
  {
    id: 'sorting',
    name: 'Sorting Algorithms',
    category: 'beginner',
    description: 'Master all sorting algorithms and their implementations',
    concepts: ['Bubble Sort', 'Selection Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort', 'Heap Sort'],
    order: 3,
    problems: [
      { id: createId('All Sorting'), title: 'All Sorting Algorithms Implementation', difficulty: 'medium', status: 'not_started', notes: 'AllSorting.js (26 Apr)', attempts: 0, tags: ['sorting'] },
    ],
  },
  {
    id: 'recursion',
    name: 'Recursion & Backtracking',
    category: 'intermediate',
    description: 'Master recursive thinking and backtracking techniques',
    concepts: ['Subsets', 'Combinations', 'Permutations', 'N-Queens', 'Sudoku'],
    order: 4,
    problems: [
      { id: createId('Subsets'), title: 'Subsets', difficulty: 'medium', ...getLeetCodeInfo('Subsets'), status: 'not_started', notes: 'Bag, trolly - subsets.java (27 Apr)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('Subsets II'), title: 'Subsets Sum No Duplicate Bags in Trolly', difficulty: 'medium', ...getLeetCodeInfo('Subsets II'), status: 'not_started', notes: 'for loop based and sorting (27 Apr)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('Target Sum All bags'), title: 'Target Sum All bags', difficulty: 'medium', status: 'not_started', notes: 'targetSum.js (3 May)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('Target Sum Only one answer'), title: 'Target Sum Only one answer Possible', difficulty: 'medium', status: 'not_started', notes: 'targetSumOneAnswer.js (3 May)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('Combination Sum'), title: 'Combination Sum - Infinite selection', difficulty: 'medium', ...getLeetCodeInfo('Combination Sum'), status: 'not_started', notes: 'combinationSum.js (3 May)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('Subset Sum Infinite'), title: 'Subset Sum with Infinite Selection and Only one answer', difficulty: 'medium', status: 'not_started', notes: 'targetSumInfiniteOneAnswer.js (3 May)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('N-Queens'), title: 'N-Queens', difficulty: 'hard', ...getLeetCodeInfo('N-Queens'), status: 'not_started', notes: 'solveNQueens.js (3 May)', attempts: 0, tags: ['backtracking'] },
      { id: createId('N-Queens II'), title: 'N-Queens II', difficulty: 'hard', ...getLeetCodeInfo('N-Queens II'), status: 'not_started', notes: 'totalNQueens.js (3 May)', attempts: 0, tags: ['backtracking'] },
      { id: createId('Sudoku Solver'), title: 'Sudoku Solver', difficulty: 'hard', ...getLeetCodeInfo('Sudoku Solver'), status: 'not_started', notes: 'Assignment (3 May)', attempts: 0, tags: ['backtracking'] },
      { id: createId('Climbing Stairs'), title: 'Climbing Stairs', difficulty: 'easy', ...getLeetCodeInfo('Climbing Stairs'), status: 'not_started', notes: 'climbStairs.js (4 May)', attempts: 0, tags: ['dp', 'recursion'] },
      { id: createId('Unique Paths'), title: 'Unique Paths', difficulty: 'medium', ...getLeetCodeInfo('Unique Paths'), status: 'not_started', notes: 'kriti.js (4 May)', attempts: 0, tags: ['dp', 'recursion'] },
      { id: createId('Generate Parentheses'), title: 'Generate Parentheses', difficulty: 'medium', ...getLeetCodeInfo('Generate Parentheses'), status: 'not_started', notes: 'Assignment (4 May)', attempts: 0, tags: ['string', 'backtracking'] },
      { id: createId('Permutation Sequence'), title: 'Permutation Sequence', difficulty: 'hard', leetcodeId: 60, leetcodeUrl: 'https://leetcode.com/problems/permutation-sequence', status: 'not_started', notes: 'TODO in class', attempts: 0, tags: ['math', 'backtracking'] },
    ],
  },
  {
    id: 'trees',
    name: 'Binary Trees & BST',
    category: 'intermediate',
    description: 'Master tree traversals, BST operations, and tree algorithms',
    concepts: ['DFS', 'BFS', 'BST operations', 'Serialization', 'Level order'],
    order: 5,
    problems: [
      { id: createId('BST Implementation'), title: 'BST Implementation (DFS, BFS, Remove, Add)', difficulty: 'medium', status: 'not_started', notes: 'bst.java (10 May)', attempts: 0, tags: ['tree', 'bst'] },
      { id: createId('Binary Tree Level Order Traversal'), title: 'Binary Tree Level Order Traversal', difficulty: 'medium', ...getLeetCodeInfo('Binary Tree Level Order Traversal'), status: 'not_started', notes: 'levelOrder.js (11 May)', attempts: 0, tags: ['tree', 'bfs'] },
      { id: createId('Binary Tree Preorder Traversal'), title: 'Binary Tree Preorder Traversal', difficulty: 'easy', ...getLeetCodeInfo('Binary Tree Preorder Traversal'), status: 'not_started', notes: 'preorderTraversal.java (11 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('Delete Node in a BST'), title: 'Delete Node in a BST', difficulty: 'medium', ...getLeetCodeInfo('Delete Node in a BST'), status: 'not_started', notes: 'deleteNode.js (11 May)', attempts: 0, tags: ['tree', 'bst'] },
      { id: createId('Invert Binary Tree'), title: 'Invert Binary Tree', difficulty: 'easy', ...getLeetCodeInfo('Invert Binary Tree'), status: 'not_started', notes: 'Assignment (10 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('Maximum Depth of Binary Tree'), title: 'Maximum Depth of Binary Tree', difficulty: 'easy', ...getLeetCodeInfo('Maximum Depth of Binary Tree'), status: 'not_started', notes: 'Assignment (10 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('Diameter of Binary Tree'), title: 'Diameter of Binary Tree', difficulty: 'easy', ...getLeetCodeInfo('Diameter of Binary Tree'), status: 'not_started', notes: 'Assignment (10 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('Same Tree'), title: 'Same Tree', difficulty: 'easy', ...getLeetCodeInfo('Same Tree'), status: 'not_started', notes: 'Assignment (10 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('Subtree of Another Tree'), title: 'Subtree of Another Tree', difficulty: 'easy', ...getLeetCodeInfo('Subtree of Another Tree'), status: 'not_started', notes: 'Assignment (10 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('LCA BST'), title: 'Lowest Common Ancestor of a Binary Search Tree', difficulty: 'medium', ...getLeetCodeInfo('Lowest Common Ancestor of a Binary Search Tree'), status: 'not_started', notes: 'lowestCommonAncestorBST.js (25 May)', attempts: 0, tags: ['tree', 'bst'] },
      { id: createId('LCA Tree'), title: 'Lowest Common Ancestor of a Binary Tree', difficulty: 'medium', ...getLeetCodeInfo('Lowest Common Ancestor of a Binary Tree'), status: 'not_started', notes: 'lowestCommonAncestor.js (25 May)', attempts: 0, tags: ['tree', 'dfs'] },
      { id: createId('Zigzag Level Order'), title: 'Binary Tree Zigzag Level Order Traversal', difficulty: 'medium', ...getLeetCodeInfo('Binary Tree Zigzag Level Order Traversal'), status: 'not_started', notes: 'zigzagLevelOrder.js (17 May)', attempts: 0, tags: ['tree', 'bfs'] },
      { id: createId('Top View'), title: 'Top View of BTREE', difficulty: 'medium', status: 'not_started', notes: 'topView.js (17 May)', attempts: 0, tags: ['tree', 'bfs'] },
      { id: createId('Vertical Order'), title: 'Vertical Order Traversal of a Binary Tree', difficulty: 'hard', ...getLeetCodeInfo('Vertical Order Traversal of a Binary Tree'), status: 'not_started', notes: 'verticalTraversal.java (17 May)', attempts: 0, tags: ['tree', 'dfs', 'bfs'] },
      { id: createId('Full Binary Tree Array'), title: 'Full Binary Tree using Array', difficulty: 'medium', status: 'not_started', notes: 'Discussed (11 May)', attempts: 0, tags: ['tree', 'array'] },
      { id: createId('Serialize Deserialize'), title: 'Serialize and Deserialize Binary Tree', difficulty: 'hard', ...getLeetCodeInfo('Serialize and Deserialize Binary Tree'), status: 'not_started', notes: 'serializeNdeserialize.js (24 May)', attempts: 0, tags: ['tree', 'design'] },
    ],
  },
  {
    id: 'heap',
    name: 'Heap / Priority Queue',
    category: 'intermediate',
    description: 'Master heap data structure and priority queue operations',
    concepts: ['Min Heap', 'Max Heap', 'Heapify', 'Priority Queue'],
    order: 6,
    problems: [
      { id: createId('Heap Implementation'), title: 'Implementation of Heap', difficulty: 'medium', status: 'not_started', notes: 'heap.java (24 May)', attempts: 0, tags: ['heap'] },
    ],
  },
  {
    id: 'graphs',
    name: 'Graph Algorithms',
    category: 'advanced',
    description: 'Master graph traversal, shortest paths, and advanced graph algorithms',
    concepts: ['DFS', 'BFS', 'Dijkstra', 'Bellman-Ford', 'Floyd-Warshall', 'Topological Sort', 'MST'],
    order: 7,
    problems: [
      { id: createId('Graph Facebook Implementation'), title: 'Graph Facebook Implementation', difficulty: 'medium', status: 'not_started', notes: 'graph.java (25 May)', attempts: 0, tags: ['graph'] },
      { id: createId('Graph Traversal'), title: 'Graph Traversal (BFS/DFS)', difficulty: 'medium', status: 'not_started', notes: 'graphTraversalBfsDfs.java (25 May)', attempts: 0, tags: ['graph', 'dfs', 'bfs'] },
      { id: createId('Clone Graph'), title: 'Clone Graph', difficulty: 'medium', ...getLeetCodeInfo('Clone Graph'), status: 'not_started', notes: 'cloneGraph.java (25 May)', attempts: 0, tags: ['graph', 'dfs', 'bfs'] },
      { id: createId('Rotting Oranges'), title: 'Rotting Oranges', difficulty: 'medium', ...getLeetCodeInfo('Rotting Oranges'), status: 'not_started', notes: 'orangesRotting.js (31 May)', attempts: 0, tags: ['graph', 'bfs'] },
      { id: createId('Number of Islands'), title: 'Number of Islands', difficulty: 'medium', ...getLeetCodeInfo('Number of Islands'), status: 'not_started', notes: 'numIslands.java (31 May)', attempts: 0, tags: ['graph', 'dfs', 'bfs'] },
      { id: createId('Flood Fill'), title: 'Flood Fill', difficulty: 'easy', ...getLeetCodeInfo('Flood Fill'), status: 'not_started', notes: 'floodFill.java (31 May)', attempts: 0, tags: ['graph', 'dfs', 'bfs'] },
      { id: createId('Number of Lakes'), title: 'Number of Lakes', difficulty: 'medium', status: 'not_started', notes: '', attempts: 0, tags: ['graph', 'dfs', 'bfs'] },
      { id: createId('Course Schedule'), title: 'Course Schedule', difficulty: 'medium', ...getLeetCodeInfo('Course Schedule'), status: 'not_started', notes: 'canFinish.js (31 May)', attempts: 0, tags: ['graph', 'topological-sort'] },
      { id: createId('Course Schedule II'), title: 'Course Schedule II', difficulty: 'medium', ...getLeetCodeInfo('Course Schedule II'), status: 'not_started', notes: 'findOrder.js (31 May)', attempts: 0, tags: ['graph', 'topological-sort'] },
      { id: createId('Longest Increasing Path'), title: 'Longest Increasing Path in a Matrix', difficulty: 'hard', ...getLeetCodeInfo('Longest Increasing Path in a Matrix'), status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['graph', 'dfs', 'dp'] },
      { id: createId('Cat and Mouse'), title: '913. Cat and Mouse', difficulty: 'hard', ...getLeetCodeInfo('913. Cat and Mouse'), status: 'not_started', notes: '', attempts: 0, tags: ['graph', 'game-theory'] },
      { id: createId('Dijkstra Imp'), title: 'Dijkstras Implementation', difficulty: 'medium', status: 'not_started', notes: 'networkDelayTime.js (1 Jun)', attempts: 0, tags: ['graph', 'dijkstra'] },
      { id: createId('Network Delay Time'), title: 'Network Delay Time', difficulty: 'medium', ...getLeetCodeInfo('Network Delay Time'), status: 'not_started', notes: 'networkDelayTime.js (2 Jun)', attempts: 0, tags: ['graph', 'dijkstra'] },
      { id: createId('Bellman Impl'), title: 'Bellman-Ford Implementation', difficulty: 'medium', status: 'not_started', notes: '', attempts: 0, tags: ['graph', 'bellman-ford'] },
      { id: createId('Cheapest Flights'), title: 'Cheapest Flights Within K Stops', difficulty: 'medium', ...getLeetCodeInfo('Cheapest Flights Within K Stops'), status: 'not_started', notes: 'findCheapestPrice.js (14 Jun)', attempts: 0, tags: ['graph', 'bellman-ford'] },
      { id: createId('Topological Sort BFS'), title: "Topological Sort BFS (Kahn's Algorithm)", difficulty: 'medium', status: 'not_started', notes: 'TopoSort-Kahns-BFS.js (15 Jun)', attempts: 0, tags: ['graph', 'topological-sort'] },
      { id: createId('Detect Cycle Directed'), title: 'Detect Cycle Directed BFS', difficulty: 'medium', status: 'not_started', notes: 'Detect Cycle Directed BFS-Kahns.js (15 Jun)', attempts: 0, tags: ['graph', 'cycle-detection'] },
      { id: createId('Topological Sort DFS'), title: 'Topological Sort DFS', difficulty: 'medium', status: 'not_started', notes: 'topoSort-DFS.js (15 Jun)', attempts: 0, tags: ['graph', 'topological-sort'] },
      { id: createId('Course Schedule IV'), title: 'Course Schedule IV', difficulty: 'medium', ...getLeetCodeInfo('Course Schedule IV'), status: 'not_started', notes: 'Assignment (15 Jun)', attempts: 0, tags: ['graph', 'topological-sort'] },
      { id: createId('Floyd Warshall'), title: 'Floyd Warshall Algorithm', difficulty: 'medium', status: 'not_started', notes: 'floydWarshall.js (22 Jun)', attempts: 0, tags: ['graph', 'shortest-path'] },
      { id: createId('Find the City'), title: 'Find the City With Smallest Number of Neighbors', difficulty: 'medium', leetcodeId: 1334, leetcodeUrl: 'https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance', status: 'not_started', notes: 'findTheCity.js (22 Jun)', attempts: 0, tags: ['graph', 'floyd-warshall'] },
      { id: createId('Prims MST'), title: 'Prims Algorithm (Minimum Spanning Tree)', difficulty: 'hard', status: 'not_started', notes: 'Prims.js (28 Jun)', attempts: 0, tags: ['graph', 'mst'] },
      { id: createId('Min Cost Connect All Points'), title: 'Min Cost to Connect All Points', difficulty: 'medium', leetcodeId: 1584, leetcodeUrl: 'https://leetcode.com/problems/min-cost-to-connect-all-points', status: 'not_started', notes: 'Assignment - Raman Kriti, Abhi', attempts: 0, tags: ['graph', 'mst'] },
      { id: createId('Shortest Path Binary Matrix'), title: 'Shortest Path in Binary Matrix', difficulty: 'medium', ...getLeetCodeInfo('Shortest Path in Binary Matrix'), status: 'not_started', notes: 'shortestPathBinaryMatrix.js (29 Jun)', attempts: 0, tags: ['graph', 'bfs'] },
      { id: createId('Kruskals MST'), title: 'Kruskals MST', difficulty: 'hard', status: 'not_started', notes: 'kruskals.js (10 Aug)', attempts: 0, tags: ['graph', 'mst'] },
    ],
  },
  {
    id: 'tries',
    name: 'Trie (Prefix Tree)',
    category: 'advanced',
    description: 'Master trie data structure for efficient string operations',
    concepts: ['Trie implementation', 'Autocomplete', 'Word search'],
    order: 8,
    problems: [
      { id: createId('Implement Trie'), title: 'Implement Trie (Prefix Tree)', difficulty: 'medium', ...getLeetCodeInfo('Implement Trie (Prefix Tree)'), status: 'not_started', notes: 'trie.js (28 Jun)', attempts: 0, tags: ['trie', 'design'] },
      { id: createId('Search Suggestion'), title: 'Search Suggestions System', difficulty: 'medium', status: 'not_started', notes: 'searchSuggestion.html (28 Jun)', attempts: 0, tags: ['trie', 'string'] },
      { id: createId('Word Search'), title: 'Word Search', difficulty: 'medium', ...getLeetCodeInfo('Word Search'), status: 'not_started', notes: 'exist.js (28 Jun)', attempts: 0, tags: ['array', 'backtracking'] },
      { id: createId('Word Search II'), title: 'Word Search II', difficulty: 'hard', ...getLeetCodeInfo('Word Search II'), status: 'not_started', notes: 'wordsearch2.js (24 Aug)', attempts: 0, tags: ['trie', 'backtracking'] },
    ],
  },
  {
    id: 'dynamic-programming',
    name: 'Dynamic Programming',
    category: 'advanced',
    description: 'Master DP patterns and optimization techniques',
    concepts: ['Memoization', 'Tabulation', '1D DP', '2D DP', 'Knapsack', 'LCS', 'Stock problems'],
    order: 9,
    problems: [
      { id: createId('FIB DP'), title: 'Fibonacci (DP Introduction)', difficulty: 'easy', status: 'not_started', notes: 'fib DP intro (22 Jun)', attempts: 0, tags: ['dp'] },
      { id: createId('Climbing Stairs DP'), title: 'Climbing Stairs (DP)', difficulty: 'easy', ...getLeetCodeInfo('Climbing Stairs'), status: 'not_started', notes: 'climbStairs.js (29 Jun)', attempts: 0, tags: ['dp'] },
      { id: createId('Unique Paths DP'), title: 'Unique Paths (DP)', difficulty: 'medium', ...getLeetCodeInfo('Unique Paths'), status: 'not_started', notes: 'uniquepaths.js (5 Jul)', attempts: 0, tags: ['dp'] },
      { id: createId('Unique Paths II'), title: 'Unique Paths II', difficulty: 'medium', ...getLeetCodeInfo('Unique Paths II'), status: 'not_started', notes: 'uniquePathsWithObstacles.js (5 Jul)', attempts: 0, tags: ['dp'] },
      { id: createId('Target Sum Count'), title: 'Target Sum Count', difficulty: 'medium', status: 'not_started', notes: '', attempts: 0, tags: ['dp'] },
      { id: createId('Target Sum Trolly'), title: 'Target Sum Trolly (DP)', difficulty: 'medium', status: 'not_started', notes: 'targetSumDP.js (12 Jul)', attempts: 0, tags: ['dp'] },
      { id: createId('Target Sum Boolean unlimited'), title: 'Target Sum Possible Boolean based (unlimited supply)', difficulty: 'medium', status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['dp'] },
      { id: createId('Get one combo unlimited'), title: 'Get one combination which adds to target (unlimited supply)', difficulty: 'medium', status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['dp'] },
      { id: createId('Get one combo memo unlimited'), title: 'Get one combination which adds to target memo (unlimited supply)', difficulty: 'medium', status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['dp'] },
      { id: createId('Get one combo memo limited'), title: 'Get one combination which adds to target memo (limited supply)', difficulty: 'medium', status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['dp'] },
      { id: createId('House Robber'), title: 'House Robber', difficulty: 'medium', ...getLeetCodeInfo('House Robber'), status: 'not_started', notes: '', attempts: 0, tags: ['dp', 'array'] },
      { id: createId('House Robber II'), title: 'House Robber II', difficulty: 'medium', ...getLeetCodeInfo('House Robber II'), status: 'not_started', notes: 'houseRob2.js (12 Jul)', attempts: 0, tags: ['dp', 'array'] },
      { id: createId('Minimum Path Sum'), title: 'Minimum Path Sum', difficulty: 'medium', ...getLeetCodeInfo('Minimum Path Sum'), status: 'not_started', notes: 'minPathSum.js (13 Jul)', attempts: 0, tags: ['dp', 'array'] },
      { id: createId('KnapSack01'), title: '0/1 Knapsack', difficulty: 'medium', status: 'not_started', notes: 'knapsack01.js (13 Jul)', attempts: 0, tags: ['dp', 'knapsack'] },
      { id: createId('Coin Change'), title: 'Coin Change', difficulty: 'medium', ...getLeetCodeInfo('Coin Change'), status: 'not_started', notes: 'coinChange.js (19 Jul)', attempts: 0, tags: ['dp', 'array'] },
      { id: createId('Best Time Stock'), title: 'Best Time to Buy and Sell Stock', difficulty: 'easy', ...getLeetCodeInfo('Best Time to Buy and Sell Stock'), status: 'not_started', notes: 'maxProfit.js (19 Jul)', attempts: 0, tags: ['array', 'dp'] },
      { id: createId('Best Time Stock II'), title: 'Best Time to Buy and Sell Stock II', difficulty: 'medium', ...getLeetCodeInfo('Best Time to Buy and Sell Stock II'), status: 'not_started', notes: 'maxProfit2.js (19 Jul)', attempts: 0, tags: ['array', 'dp'] },
      { id: createId('Best Time Stock III'), title: 'Best Time to Buy and Sell Stock III', difficulty: 'hard', ...getLeetCodeInfo('Best Time to Buy and Sell Stock III'), status: 'not_started', notes: 'maxProfit3.js (19 Jul)', attempts: 0, tags: ['array', 'dp'] },
      { id: createId('Best Time Stock IV'), title: 'Best Time to Buy and Sell Stock IV', difficulty: 'hard', ...getLeetCodeInfo('Best Time to Buy and Sell Stock IV'), status: 'not_started', notes: 'same as above with 2 as K (19 Jul)', attempts: 0, tags: ['array', 'dp'] },
      { id: createId('Decode Ways'), title: 'Decode Ways', difficulty: 'medium', ...getLeetCodeInfo('Decode Ways'), status: 'not_started', notes: 'Assignment', attempts: 0, tags: ['string', 'dp'] },
      { id: createId('Jump Game'), title: 'Jump Game', difficulty: 'medium', ...getLeetCodeInfo('Jump Game'), status: 'not_started', notes: 'canJump.js (19 Jul)', attempts: 0, tags: ['array', 'dp'] },
      { id: createId('Longest Common Subsequence'), title: 'Longest Common Subsequence', difficulty: 'medium', ...getLeetCodeInfo('Longest Common Subsequence'), status: 'not_started', notes: 'longestCommonSubsequence.js (26 Jul)', attempts: 0, tags: ['string', 'dp'] },
      { id: createId('Longest Palindromic Subsequence'), title: 'Longest Palindromic Subsequence', difficulty: 'medium', ...getLeetCodeInfo('Longest Palindromic Subsequence'), status: 'not_started', notes: 'longestPalindromeSubseq.js (26 Jul)', attempts: 0, tags: ['string', 'dp'] },
      { id: createId('Longest Palindromic Substring'), title: 'Longest Palindromic Substring', difficulty: 'medium', ...getLeetCodeInfo('Longest Palindromic Substring'), status: 'not_started', notes: 'longestPalindrome.js (26 Jul)', attempts: 0, tags: ['string', 'dp'] },
      { id: createId('All subsequences Pattern'), title: 'All subsequences Pattern (Sub problems approach)', difficulty: 'medium', status: 'not_started', notes: '', attempts: 0, tags: ['dp'] },
      { id: createId('Subarray Sum Equals K'), title: 'Subarray Sum Equals K', difficulty: 'medium', leetcodeId: 560, leetcodeUrl: 'https://leetcode.com/problems/subarray-sum-equals-k', status: 'not_started', notes: '', attempts: 0, tags: ['array', 'hash-table'] },
      { id: createId('DP On strings'), title: 'DP On strings', difficulty: 'medium', status: 'not_started', notes: '', attempts: 0, tags: ['dp', 'string'] },
    ],
  },
  {
    id: 'greedy',
    name: 'Greedy Algorithms',
    category: 'advanced',
    description: 'Master greedy approaches and optimization',
    concepts: ['Activity selection', 'Fractional knapsack', 'Interval scheduling'],
    order: 10,
    problems: [
      { id: createId('KnapSack Fractional'), title: 'Fractional Knapsack', difficulty: 'medium', status: 'not_started', notes: 'fractionalknapsack.js (19 Jul)', attempts: 0, tags: ['greedy'] },
      { id: createId('Lemonade Change'), title: 'Lemonade Change', difficulty: 'easy', ...getLeetCodeInfo('Lemonade Change'), status: 'not_started', notes: 'lemonadeChange.js (17 Aug)', attempts: 0, tags: ['greedy'] },
      { id: createId('N Meeting room'), title: 'N Meeting in One Room', difficulty: 'medium', status: 'not_started', notes: 'maxMeetings.js (17 Aug)', attempts: 0, tags: ['greedy', 'sorting'] },
    ],
  },
  {
    id: 'binary-search',
    name: 'Binary Search',
    category: 'intermediate',
    description: 'Master binary search and its applications',
    concepts: ['Binary search template', 'Search space reduction', 'Rotated arrays', 'Matrix search'],
    order: 11,
    problems: [
      { id: createId('Binary Search Base'), title: 'Binary Search', difficulty: 'easy', ...getLeetCodeInfo('Binary Search'), status: 'not_started', notes: 'searchRange.js (2 Aug)', attempts: 0, tags: ['array', 'binary-search'] },
      { id: createId('Search in Rotated Sorted Array'), title: 'Search in Rotated Sorted Array', difficulty: 'medium', ...getLeetCodeInfo('Search in Rotated Sorted Array'), status: 'not_started', notes: 'searchRotated.js (2 Aug)', attempts: 0, tags: ['array', 'binary-search'] },
      { id: createId('Koko Eating Bananas'), title: 'Koko Eating Bananas', difficulty: 'medium', ...getLeetCodeInfo('Koko Eating Bananas'), status: 'not_started', notes: 'minEatingSpeed.js (2 Aug)', attempts: 0, tags: ['array', 'binary-search'] },
      { id: createId('Sqrt(x)'), title: 'Sqrt(x)', difficulty: 'easy', ...getLeetCodeInfo('Sqrt(x)'), status: 'not_started', notes: 'mySqrt.js (2 Aug)', attempts: 0, tags: ['math', 'binary-search'] },
      { id: createId('Capacity To Ship Packages Within D Days'), title: 'Capacity To Ship Packages Within D Days', difficulty: 'medium', ...getLeetCodeInfo('Capacity To Ship Packages Within D Days'), status: 'not_started', notes: 'shipWithinDays.js (3 Aug)', attempts: 0, tags: ['array', 'binary-search'] },
      { id: createId('Search a 2D Matrix'), title: 'Search a 2D Matrix', difficulty: 'medium', ...getLeetCodeInfo('Search a 2D Matrix'), status: 'not_started', notes: 'searchMatrix.java (3 Aug)', attempts: 0, tags: ['array', 'binary-search', 'matrix'] },
      { id: createId('Search a 2D Matrix II'), title: 'Search a 2D Matrix II', difficulty: 'medium', ...getLeetCodeInfo('Search a 2D Matrix II'), status: 'not_started', notes: 'searchMatrix2.java (3 Aug)', attempts: 0, tags: ['array', 'binary-search', 'matrix'] },
    ],
  },
  {
    id: 'string-algorithms',
    name: 'String Algorithms',
    category: 'advanced',
    description: 'Master advanced string matching algorithms',
    concepts: ['Pattern matching', 'Rabin-Karp', 'KMP'],
    order: 12,
    problems: [
      { id: createId('Rabin Karp'), title: 'Rabin Karp Pattern Matching', difficulty: 'medium', status: 'not_started', notes: 'RabinKarp.js (17 Aug)', attempts: 0, tags: ['string', 'pattern-matching'] },
      { id: createId('KMP search'), title: 'KMP Pattern Search', difficulty: 'medium', status: 'not_started', notes: 'kmpSearch.js (17 Aug)', attempts: 0, tags: ['string', 'pattern-matching'] },
    ],
  },
  {
    id: 'bit-manipulation',
    name: 'Bit Manipulation',
    category: 'intermediate',
    description: 'Master bitwise operations and techniques',
    concepts: ['Bitwise operators', 'Bit masking', 'XOR tricks'],
    order: 13,
    problems: [
      { id: createId('Power Set'), title: 'Power Set using Bit Manipulation', difficulty: 'medium', status: 'not_started', notes: 'getPowerSet.js (24 Aug)', attempts: 0, tags: ['bit-manipulation', 'backtracking'] },
    ],
  },
];
